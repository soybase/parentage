#!/usr/bin/env perl

# Program: parentage_report.pl
# Program description: see usage message.
# Steven Cannon 2024

use feature say; 
use warnings; 
use strict; 
use Getopt::Long;
use FindBin qw($Bin);
use lib "$Bin";

my ($query, $verbose, $help);
my $format = "string";
my $line_ct = 0;
my $max_ped_size = 999;

my $parents = "data/parentage.tsv"; 
my $synonyms = "data/parentage-synonyms.tsv"; 
my $comments = "data/parentage-comments.tsv"; 
my $plist; 

my $usage = <<EOS;
  Usage:  
  parentage_report.pl -query ID [-options]
  
  Three data files are required, and an optional fourth ensures a much faster run.
  If the data files named as follows and available in a directory "data" at
  the same location as the script, the script will use these file names and locations
  by default, so they don't need to be specified explicitly:
       -parentage data/parentage.tsv 
       -synonyms data/parentage-synonyms.tsv 
       -comments data/parentage-comments.tsv 
       -plist data/parentage-list.tsv          # Optional but recommended
  
  Given the requried input data, generate a report about an individual, including the pedigree, 
  any aliases/synonyms for the line, the lines which have the individual in their pedigree, 
  and any available comments about the individual.
  
  In the invocation without -plist, the parentage.tsv file is taken in as data for calculating
  pedigrees for all lines, and then the query is checked against those pedigrees to find which lines
  contain the query individual in the pedigree. This option is space-efficient (parentage.tsv is small)
  but relatively time-consuming to run (it takes several seconds to recalculate all pedigrees).
  
  In the invocation WITH -plist, the parentage-list.tsv file has, for each individual, the lines in the
  pedigrees of that individual. The query is checked against each of those lists to find which lines
  contain the query individual in the pedigree. This option is relatively space-inefficient
  (the parentage-list.tsv file may be several megabytes) but fast to run.
  
  The parentage-list.tsv can be generated by the script parentage.pl:
    ./parentage.pl -p data/parentage.tsv -f list -outdir data -outfile parentage-list.tsv

  Some other lines to try, to check various characteristics of the data:
    Hardin, Hayes, Hamlin, Gnome, Franklin, Flyer, Flambeau, Williams, "Williams 82", Lee

  Required:
    -query      ID of an individual for which to generate a report

  Required, with defaults indicated above:
    -parents    File with three columns: individuals and parents individuals and the parents;
    -synonyms   File with two columns: individual and synonym (if multiple synonyms, one line for each);
    -comments   File with two columns: individual and comments

  Options:
    -plist      Tab-separated file with individual (first column) and all progenitors for that individual
    -max_ped_size  The maximum number of individuals in the pedigree to report.
    -verbose    Report some intermediate information.
    -help       This message.
EOS

GetOptions(
  'query=s'        => \$query, # required
  'parents:s'      => \$parents,  # required but with default value
  'synonyms:s'     => \$synonyms, # required but with default value
  'comments:s'     => \$comments, # required but with default value
  'plist:s'        => \$plist,    
  'max_ped_size:i' => \$max_ped_size,
  'v|verbose'      => \$verbose,
  'h|help'         => \$help,
);

unless (-e $parents && -e $synonyms && -e $comments ){ die "$usage" } 
unless ( $query ){ die "$usage" } 

open (my $PAR_FH, "<", $parents) or die "Can't open in parents: $parents $!\n";
open (my $SYN_FH, "<", $synonyms) or die "Can't open in synonyms: $synonyms $!\n";
open (my $COM_FH, "<", $comments) or die "Can't open in comments: $comments $!\n";

my $PLIST_FH;
my %PAR_HoA;
my @progenitors;
my %PED_HSH;
my @matches;
if ($plist){
  open ($PLIST_FH, "<", $plist) or die "Can't open in plist: $plist $!\n";
  while (<$PLIST_FH>){
    chomp;
    my ($ind, @progenitors) = split(/\t+/, $_);
    $PAR_HoA{$ind} = [ @progenitors ];
  }
}
else {
  # Use parentage.pl to calculate lists of strains in the pedigree of each individual 
  # The serialized structure is a hash of arrays, with the hash key being the individual and the strains being the array values:
  # { indivd [strain1 strain2 strain3] }
  my @args1 = ( "-parents", "$parents", "-format", "list" );
  #say "perl $Bin/parentage.pl @args1";
  my $serialized_result1 = `perl "$Bin/parentage.pl" @args1`;
  my @ped_ary = split(/\n/, $serialized_result1);
  for my $ped_line (@ped_ary){
    my ($ind, @ped_list) = split(/\t/, $ped_line);
    $PED_HSH{ $ind } = [ @ped_list ];
    if ( grep { $query eq $_ } @ped_list ){
      push @matches, $ind;
    }
  }
}

my @alt_names;
while (<$SYN_FH>){
  chomp;
  my $line = $_;
  my ($ind, $alt) = split(/\t+/, $_);
  if ($query eq $ind){ push @alt_names, $alt } 
}

my @q_comments;
while (<$COM_FH>){
  chomp;
  my $line = $_;
  my ($ind, $comment) = split(/\t+/, $_);
  if ($query eq $ind){ push @q_comments, $comment } 
}

# Print report for the provided $query

# Generate parentage result for the given query
my @args2 = ( "-parents", "$parents", "-query", "\"$query\"", "-max", "$max_ped_size" );
#say "perl $Bin/parentage.pl @args2";
my $serialized_result2 = `perl "$Bin/parentage.pl" @args2`;
if ($serialized_result2){ # Report the following only if a pedigree is returned.
  say "Pedigree of $query (showing first the immediate parents, then progressively earlier crosses):";
  say $serialized_result2;

  # Call parentage.pl to produce tabular output for https://helium.hutton.ac.uk/#/pedigree
  my $outfile = $query;
  $outfile =~ s/ /_/g;
  $outfile =~ s/^(.+)$/Helium-$1.txt/g;
  my @args3 = ( "-parents", "$parents", "-query", "\"$query\"", "-outfile", "$outfile", "-format", "table0" );
  #say "perl $Bin/parentage.pl @args3";
  `perl "$Bin/parentage.pl" @args3`;
  say "Pedigree file of $query, suitable for uploading to the Helium pedigree viewer (https://helium.hutton.ac.uk/#/pedigree) for a graphical representation: $outfile";
}
else {
  say "No pedigree is available for this individual.";
}

if (@matches){
  say "$query is in the pedigree of these lines: ", join(", ", @matches), "\n";
}
if ( @alt_names ){
  say "Alternate names for $query: ", join(", ", @alt_names), "\n";
}
if ( @q_comments ){
  say "Comments for $query: ", join(", ", @q_comments), "\n";
}


__END__

Versions
2024-11-01 Initial version
2024-11-03 Calculate pedigrees from parentage table using parentage.pl, rather than take in as a precalculated file
2024-11-04 Fix call to parentage.pl to permit query with spaces. Also generate a text file that can be uploaded to Helium.
2024-11-08 Set defaults for required data files. For increased speed, optionally take in -plist data/parentage-list.tsv

